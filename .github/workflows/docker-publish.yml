name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - CICD

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  # pull_request:

# env:
  # TODO: Change variable to your image's name.
  # IMAGE_NAME: image

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  Build_TF:
    name: 'Build wheel package'
    runs-on: ubuntu-latest
    timeout-minutes: 2160 # 1.5 days

    steps:
    - id: tfVersion  # The step ID to refer to later.
      name: Get Tensorflow latest version tag
      timeout-minutes: 1440
      uses: oprypin/find-latest-tag@v1
      with:
        repository: tensorflow/tensorflow  # The repository to scan.
        releases-only: true  # We know that all relevant tags have a GitHub release for them.
    - name: Latest Tensorflow version print
      run: echo "Tensorflow is at version ${{ steps.tfVersion.outputs.tag }}"
    - name: Checkout tensorflow repository
      uses: actions/checkout@v2
      with:
        repository: tensorflow/tensorflow
        ref: ${{ steps.tfVersion.outputs.tag }}  # At the latest released version, found earlier.
    - name: Build ARM64 wheel package
      run: |
          cd /home/runner/work/tensorflow_aarch64/tensorflow_aarch64
          tensorflow/tools/ci_build/ci_build.sh PI-PYTHON38 tensorflow/tools/ci_build/pi/build_raspberry_pi.sh AARCH64

    # - name: Fake file generation
    #   run: |
    #       cd /home/runner/work/tensorflow_aarch64/tensorflow_aarch64
    #       mkdir output-artifacts
    #       truncate -s 5M output-artifacts/benchmark_model
    #       truncate -s 5M output-artifacts/tensorflow.whl
    #       truncate -s 5M output-artifacts/libtensorflow.so
    #       truncate -s 5M output-artifacts/libtensorflow_framework.so

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: output-artifacts
        path: |
          /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts
          # retention for 90 days

  Build_Release_Docker_Img:
    name: 'Build and Release Docker Images'
    runs-on: ubuntu-latest
    needs: Build_TF

    steps:
    - name: 'Download download-artifact'
      uses: actions/download-artifact@v2
      with:
        name: output-artifacts
        path: /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1


  Release_GitHub:
    name: 'Release files GitHub'
    runs-on: ubuntu-latest
    needs: Build_TF

    steps:
    - name: Download download-artifact
      uses: actions/download-artifact@v2
      with:
        name: output-artifacts
        path: /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts

    - id: tfVersion  # The step ID to refer to later.
      name: Get Tensorflow latest version tag
      uses: oprypin/find-latest-tag@v1
      with:
        repository: tensorflow/tensorflow  # The repository to scan.
        releases-only: true  # We know that all relevant tags have a GitHub release for them.

    - name: Latest Tensorflow version print
      run: echo "Tensorflow is at version ${{ steps.tfVersion.outputs.tag }}"

    - name: Print output-artifacts
      run: ls -lh /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts

    - name: Zip files
      run: zip -r /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts/tensorflow_aarch64_files.zip /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts/

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.tfVersion.outputs.tag }}
        name: tensorflow_aarch64 ${{ steps.tfVersion.outputs.tag }}
        draft: false
        prerelease: false
        allowUpdates: true # Update if already exists
        artifacts: /home/runner/work/tensorflow_aarch64/tensorflow_aarch64/output-artifacts/*
        replacesArtifacts: true

